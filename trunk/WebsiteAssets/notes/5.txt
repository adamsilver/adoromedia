QUnit.specify("Panel", function(){
	describe("When the button is clicked", function(){
		
		var button, panel, realButton;
		
		before(function(){
			button = $("#button");
			realButton = button.clone(true);
			panel = $("#panel");
		})
		
		after(function(){
			button.replaceWith(realButton);
			panel.hide();
		})
		
		it("shows the panel", function(){
			button.click();
			assert(panel.is(":visible")).isTrue();
		});
		it("changes colour", function(){
			var colour = button.css("backgroundColor");
			button.click();
			assert(button.css("backgroundColour")).isNotEqual(colour);
		});
		it("becomes disabled", function() {
			button.click();
			assert(button.attr("disabled")).isTrue();
		});
		it("changes the title of the document", function(){
			var docTitle = document.title;
			button.click();
			assert(document.title).isNotEqual(docTitle);
		});
	})
});

Panel = (function(){
	function panel() {
		
		this.button = $("#button");
		this.panel = $("#panel");
		
		this.button.bind("click", $.fix(this, this.button_onClick));
		
		
	}
	panel.prototype.button_onClick = function(e) {
		this.panel.addClass("show");
		this.button.attr("disabled", "true");
		document.title = "hello james";
	}
	
	
	return new panel;
})();


module = (function() {
	return {
	
	};
})();


module = new (function() {

	function() {};

	this.function = function() {}
});


function f(){}
f.prototype.....
o = new f;


$.scope = function(s, f) {
	return function scope() {
		f.apply(s, arguments);
	}
}


Panel = (function() {
	function panel() {
		Close.Loader.add(this.onload);
	};
	panel.prototype.onload = function() {
		this.node = $(...);
		this.node.bind("click", $.scope(this, this.node_click));
	}
	panel.prototype.node_click = function(e) {
		//what is "this"?
	}
	return new panel;
})();



Close = {};
Close.Loader = (function() {
	var loader = function() {
		$(this.onload);
	};
	loader.prototype.handlers = [];
	loader.add = function(f) {
		this.handlers.push(f)
	}
	loader.onload = function() {
		for (handler in this.handlers) {
			this.handlers[handler]();
		}
	}
	return new loader;
});